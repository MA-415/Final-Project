---
title: "Plots"
format: pdf
editor: visual
---

# Homework

1.  Use facets in ggplot()
2.  Use Legends in ggplot()
3.  Use Boxplots and Violin plots

# Data Visualization

I am following Intro2R book (Chapter 4) which Haviland posted in the content folder (Class 2 -Jan 23) on Blackboard for this discussion. We will be learning how to use plot() in base R for different visualizations.

## Scatter Plot

I am using the `city` data set containing `porto`, `aberdeen`, `nairobi` and `genoa` columns which we created in the last discussion. Second and Third line of code produces you same plots.

```{r}
city <- data.frame(
  porto = rnorm(100),
  aberdeen = rnorm(100),
  nairobi = c(rep(NA, 10), rnorm(90)),
  genoa = rnorm(100)
)
```

`points()` is used to add more points representing the variable you specify.

```{r}
library(tidyverse)
plot(city$porto)
points(city$aberdeen, col = 'red')
plot(city$porto, city$aberdeen)
plot(city$porto ~ city$aberdeen, col='blue')

```

#### More than 1 Plot in one page

Use par() before you start plotting to put all the following plots in one page.

```{r}
par(mfrow = c(2,2))
plot(city$porto)
plot(city$porto, city$aberdeen)
plot(city$porto ~ city$aberdeen, col='blue')
plot(city$aberdeen, city$genoa)
```

#### Lines

You can add lines using `abline()` after you are done plotting as we did in last discussion or you can specify it in the `plot()` function itself.

```{r}
par(mfrow = c(2, 2))
plot(city$porto, type = "l")
points(city$aberdeen, col = 'red')
plot(city$porto, city$aberdeen,  type = "b")
plot(city$porto ~ city$aberdeen, col='blue', type = "o")
plot(city$aberdeen, city$genoa, type = "c")

```

## Histograms

We already explored histograms in the previous discussion.

```{r}
hist(city$porto)
```

Remember to put `freq` = `FALSE` as we are plotting density.

```{r}
dens <- density(city$porto)
hist(city$porto, main = "porto",
      freq = FALSE)
lines(dens)
```

## Pair Plots and Co Plots

`panel.smooth` for lines

To use `panel.hist` and `panel.cor`, you need to copy and paste these functions from `?pairs` to console.

panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * r)
}


panel.hist <- function(x, ...)
{
    usr <- par("usr")
    par(usr = c(usr[1:2], 0, 1.5) )
    h <- hist(x, plot = FALSE)
    breaks <- h$breaks; nB <- length(breaks)
    y <- h$counts; y <- y/max(y)
    rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}

```{r}
pairs(city[, c("porto", "aberdeen", "nairobi", "genoa")], panel = panel.smooth)
pairs(city[, c("porto", "aberdeen", "nairobi", "genoa")], upper.panel = panel.smooth, lower.panel = panel.cor, diag.panel = panel.hist)
```

`coplot()` is basically accounting for the third variable that might be effecting the two variables that you are interested in.

```{r}
coplot(porto ~ genoa|aberdeen, data = city)
```

## Saving the plots

You can save the plots using `png` or `jgp`. Type the file name you want it to be saved as follow :

```{r}
png("plot.png")
coplot(porto ~ genoa|aberdeen, data = city)
```

If it doesn't save in your folder, you might need to set your current folder as working directory.

# Q/A

### How can we alter the figure dimensions?

There are many ways to do it. First, you can set a size as default in the first R chunk :

```{r}
knitr::opts_chunk$set(fig.width = 7, fig.height = 5)

```

or you can set it in individual R chunk as follow :

```{r my-plot, fig.width=8, fig.height=6}

plot(city$porto)

```

#Box Plot and Violin Plot

```{r}
boxplot(city, 
        main = "Boxplot of City Data", 
        ylab = "Value", 
        col = c("lightblue", "lightgreen", "pink", "lightyellow"), 
        names = c("Porto", "Aberdeen", "Nairobi", "Genoa"))
```


```{r}
ggplot() +
  geom_violin(aes(x = "Porto", y = city$porto), fill = "lightblue", alpha = 0.7) +
  geom_violin(aes(x = "Aberdeen", y = city$aberdeen), fill = "lightgreen", alpha = 0.7) +
  geom_violin(aes(x = "Nairobi", y = city$nairobi), fill = "pink", alpha = 0.7) +
  geom_violin(aes(x = "Genoa", y = city$genoa), fill = "lightyellow", alpha = 0.7) +
  labs(title = "Violin Plot of City Data", x = "City", y = "Value") +
  theme_minimal()
```

#ggplot facets and legends

```{r}
city_subset <- city[, c("porto", "aberdeen")]

ggplot(gather(city_subset, key = "City", value = "Value"), aes(x = City, y = Value, fill = City)) +
  geom_boxplot() +
  facet_grid(. ~ City) +  # Facet by City
  labs(title = "Box Plot of Selected Cities", x = "City", y = "Value", fill = "City") +
  theme_minimal() +
  theme(legend.position = "bottom")
```






